/*                                                                                Problem:
Given a list and a number, create a new list that contains each number of list at most N times, without reordering.
For example if the input number is 2, and the input list is [1,2,3,1,2,1,2,3], you take [1,2,3,1,2], drop the next [1,2] since this would lead to 1 and 2 being in the result 3 times, and then take 3, which leads to [1,2,3,1,2,3].
With list [20,37,20,21] and number 1, the result would be [20,37,21].
*/

/*                                                                                Solution:                                                                 
*/

std::vector<int> deleteNth(std::vector<int> arr, int n)
{
    // unordered map to allow for each individual number in passed in array to have a unique count.
    std::unordered_map<int, int> counting_map;
    // modified version of original array to return
    std::vector<int> mod_arr;

    // to preserve order, if the number count is less than n, add it and increase the number count
    // otherwise just pass by it.
    for(int i : arr){
        if(counting_map[i] < n){
            mod_arr.push_back(i);
            counting_map[i]++;
        }
    }

    return mod_arr;
}
